pac4j {
  security {
    rules = [
      {
        # this is the equivalent of /api/me(\?.*)?, which is not allowed as a key in HOCON
        "/api/me([?]{1}.*)?" = {
          clients = "keycloak,google,github,twitter,facebook,parameter,header,anonymous"
        }
      }
      {
        "/api/.*" = {
          clients = "parameter,header,keycloak,google,github,twitter,facebook"
          matchers = "excludePaths"
          authorizers = "custom"
        }
      }
      {
        ".*" = {}
      }
    ]

    excludePaths = [
      "/api/profile",
      "/api/register",
      "/api/authclients",
      "/api/activities/aggregated"
    ]
  }

  cache {
    # Cache timeout
    timeout = 15m
    timeout = ${?CACHE_TIMEOUT}

    # Maximum cache size
    size = 10000
  }

  clients {
    # Settings for the facebook-based authentication provider
    # if you are not using it, you can removeAll this portion of the config file
    # and removeAll the facebook provider from module/MyModule class
    facebook {
      redirectUri {
        # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
        secure = false
        secure = ${?FACEBOOK_REDIRECT_URI_SECURE}

        # You can use this setting to override the automatic detection
        # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
        # host=yourdomain.com
      }

      # Facebook credentials
      # These are mandatory for using OAuth and need to be provided by you,
      # if you want to use facebook as an authentication provider.
      # Get them here: https://developers.facebook.com/apps
      # Remove leading '#' after entering
      id = ${?FACEBOOK_CLIENT_ID}
      secret = ${?FACEBOOK_CLIENT_SECRET}
    }

    # Settings for the google-based authentication provider
    # if you are not using it, you can removeAll this portion of the config file
    # and removeAll the Google provider from conf/play.plugins
    google {
      redirectUri {
        # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
        secure = false
        secure = ${?GOOGLE_REDIRECT_URI_SECURE}

        # You can use this setting to override the automatic detection
        # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
        # host=yourdomain.com
      }

      # Google credentials
      # These are mandatory for using OAuth and need to be provided by you,
      # if you want to use Google as an authentication provider.
      # Get them here: https://code.google.com/apis/console
      # Remove leading '#' after entering
      id = ${?GOOGLE_CLIENT_ID}
      secret = ${?GOOGLE_CLIENT_SECRET}
    }

    # The Github settings
    github {
      redirectUri {
        # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
        secure = false
        secure = ${?GITHUB_REDIRECT_URI_SECURE}

        # You can use this setting to override the automatic detection
        # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
        # host=yourdomain.com
      }

      # Read about available scopes here: http://developer.github.com/v3/oauth/#scopes
      scope = "user"

      # Github credentials
      # Get them here: https://github.com/settings/applications/new
      # Remove leading '#' after entering:
      id = ${?GITHUB_CLIENT_ID}
      secret = ${?GITHUB_CLIENT_SECRET}
    }

    # Settings for the twitter-based authentication provider
    # if you are not using it, you can removeAll this portion of the config file
    # and removeAll the Twitter provider from module/MyModule class
    twitter {
      redirectUri {
        # Whether the redirect URI scheme should be HTTP or HTTPS (HTTP by default)
        secure = false
        secure = ${?TWITTER_REDIRECT_URI_SECURE}

        # You can use this setting to override the automatic detection
        # of the host used for the redirect URI (helpful if your service is running behind a CDN for example)
        # host=yourdomain.com
      }

      # Twitter credentials
      # These are mandatory for using OAuth and need to be provided by you,
      # if you want to use twitter as an authentication provider.
      # Get the credentials here: https://dev.twitter.com/docs/auth/oauth
      # Remove leading '#' after entering
      id = ${?TWITTER_CONSUMER_KEY}
      id = ${?TWITTER_CLIENT_ID}
      secret = ${?TWITTER_CONSUMER_SECRET}
      secret = ${?TWITTER_CLIENT_SECRET}
    }

    keycloak {
      redirectUri {
        secure = false
        secure = ${?KEYCLOAK_REDIRECT_URI_SECURE}
      }

      timeout = 3000

      # The host Keycloak is running on
      # host=yourdomain.com
      host = ${?KEYCLOAK_HOST}

      # The protocol to be used (http/https)
      protocol = https
      protocol = ${?KEYCLOAK_PROTOCOL}

      # The Keycloak realm to use
      realm = "Translatr"
      realm = ${?KEYCLOAK_REALM}

      baseUri = ${pac4j.clients.keycloak.protocol}"://"${?pac4j.clients.keycloak.host}"/auth"

      id = ${?KEYCLOAK_CLIENT_ID}
      secret = ${?KEYCLOAK_CLIENT_SECRET}
    }
  }
}
