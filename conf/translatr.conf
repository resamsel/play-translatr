translatr {
  # The base for authentication
  baseUrl = "http://localhost:9000"
  baseUrl = ${?BASE_URL}

  # The base for redirecting after login, concatenated with the redirect_uri query param
  redirectBase = ${translatr.baseUrl}
  redirectBase = ${?REDIRECT_BASE}

  # The list of usernames that are allowed to do administrational things
  admins = ""
  admins = ${?ADMINS}

  #
  # This is an optional access token that can be provided through the environment. It will generate an access token with
  # all scopes for the admin user if all of the following match:
  #
  # * The config param is set (i.e. through environment variable)
  # * The admin user exists (translatr)
  # * The admin user has no access tokens
  #
  # If any of the requirements are not met, the access token will not be created. In particular, if an access token
  # already exists, it cannot be overwritten with a different value with this mechanism.
  #
  # @since 3.1.0
  #
  adminAccessToken = ${?ADMIN_ACCESS_TOKEN}

  # Whether or not to force an SSL connection by redirecting to HTTPS
  forceSSL = false
  forceSSL = ${?FORCE_SSL}

  # The list of enabled auth providers
  # Currently available: keycloak, google, github, facebook, twitter
  auth.providers = ""
  auth.providers = ${?AUTH_PROVIDERS}

  search {
    #
    # Defaults for search
    #
    missing = false
    limit = 20

    autocomplete.limit = 3
  }

  stream.io {
    #
    # Stream.io is the notification provider for the app. To retrieve the
    # app credentials, go to https://getstream.io and create an app.
    #
    key = ""
    key = ${?STREAM_IO_KEY}
    key = ""
    secret = ${?STREAM_IO_SECRET}
  }
}

play {
  evolutions.db.default.autoApply = true

  i18n.langs = ["en", "de"]

  http {
    secret.key = ${?APPLICATION_SECRET}
    filters = filters.Filters
    parser.maxMemoryBuffer = 8M
    errorHandler = utils.HttpErrorHandler
  }

  logger.includeConfigProperties = true

  mailer.mock = true

  modules {
    enabled += "modules.FormattersModule"
    disabled += "play.data.format.FormattersModule"
    enabled += "modules.SecurityModule"

    # Choose between the cache and cookie session store (cookie session store has a dramatically low session time out,
    # but scales much better)
    enabled += "modules.CacheSessionStoreModule"
    # enabled += "modules.CookieSessionStoreModule"

    # Unused because of missing migration
    # enabled += "play.modules.swagger.SwaggerModule"

    # Unused because of missing migration
    # enabled += "modules.StreamModule"

    disabled += "play.core.ObjectMapperModule"
    enabled += "modules.JsonModule"
    enabled += "modules.ActorModule"
    enabled += "modules.NoCacheModule"
  }

  server.netty.transport = ${?NETTY_TRANSPORT}

  db.prototype.hikaricp {
    # minimumIdle = null # default
    minimumIdle = ${?DATABASE_MIN_IDLE}

    # maximumPoolSize = 10 # default
    maximumPoolSize = ${?DATABASE_MAX_POOL_SIZE}

    # connectionTimeout = 5 seconds
    connectionTimeout = ${?DATABASE_CONNECTION_TIMEOUT}

    # maxLifetime = 5 minutes
    maxLifetime = ${?DATABASE_CONNECTION_MAX_LIFETIME}

    # initializationFailTimeout = -1 # default
    initializationFailTimeout = ${?DATABASE_INIT_FAIL_TIMEOUT}
  }
}

db.default {
  driver = ${?DATABASE_DRIVER}
  url = ${?DATABASE_URL}
  username = ${?DATABASE_USER}
  password = ${?DATABASE_PASSWORD}
  logSql = false
  logSql = ${?DATABASE_LOG_SQL}
}

ebean.default = ["models.*"]

redis {
  host = ${?REDIS_HOST}
  database = ${?REDIS_DATABASE}
}

api.version = "1.0"
swagger.api {
  basepath = "/api"
  info {
    contact = "Ren√© Panzar"
    # description = ""
    title = "The Translatr API"
    # termsOfService : (String) - Terms Of Service | default : empty,
    # license : (String) - Terms Of Service | default : empty,
    # licenseUrl : (String) - Terms Of Service | default : empty
  }
}

pidfile.path = "/dev/null"

logging {
  root = "WARN"
  root = ${?LOGLEVEL_ROOT}

  com.zaxxer.hikari.pool = "WARN"
  com.zaxxer.hikari.pool = ${?LOGLEVEL_DATABASE_POOL}
}

include "pac4j.conf"
